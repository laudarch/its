;ARP/ETH TABLE MANAGEMENT (CALLED BY ETH)
;DGC 14-SEP-2014

NAI==2
NAO==10

EBLK

;INBOUND  (REMOTE TO LOCAL) ARP TABLE (AIIA[X] NON-0 => IN USE)
AIIA:	BLOCK NAI			;00..31, HW FMT
AIEA0:	BLOCK NAI			;00..31, HW FMT
AIEA1:	BLOCK NAI			;32..47, HW FMT

;OUTBOUND (LOCAL TO REMOTE) ARP TABLE (AOIA[X] NON-0 => IN USE)
AOIA:	BLOCK NAO			;00..31, HW FMT
AOEA0:	BLOCK NAO			;00..31, HW FMT
AOEA1:	BLOCK NAO			;32..47, HW FMT
AOSTS:	BLOCK NAO			;<0 SEND-REQ, 0 WAIT-ACK, >0 VALID
AOCLK:	BLOCK NAO			;IN 0.5 SECOND TICKS
AOCNT:	BLOCK NAO			;RETRY COUNT FOR WAIT-ACK

BBLK

;CALLED TO INITIALIZE (FLUSH) THE ARP TABLES
;ONLY THE AIIA/AOIA ENTRIES NEED TO BE SET TO 0, BECAUSE IF THESE
;ENTRIES ARE 0, NOTHING ELSE IN THE TABLE MATTERS AT ALL
;AN ARPCLK IN THE MIDDLE IF THIS IS HARMLESS (AND ETHINI KNOWS THIS)
ARPINI:	MOVSI H,-NAI
AINI0:	SETZM AIIA(H)			;FREE
	AOBJN H,AINI0
	MOVSI H,-NAO
AINI1:	SETZM AOIA(H)			;FREE
	AOBJN H,AINI1
	POPJ P,

;CALLED FROM NETCLK EVERY 0.5 SECOND TO AGE ENTRIES
;IN THE OUTBOUND ARP TABLE AND TO REQUEST RETRIES AT THE APPROPRIATE
;TIME. RAISES PI LEVEL TO PROTECT THE ARP TABLES FROM DEVICE PI.
ARPCLK:	CONI PI,TT			;TT = SPL(NETLVL)
	CONO PI,NETOFF
	MOVSI H,-NAO
ACLK0:	SKIPN AOIA(H)
	JRST ACLK3			;FREE
	SKIPE AOCLK(H)
	SOSE AOCLK(H)
	JRST ACLK3			;NOT END-OF-LIFE
;IF A VALID ENTRY HAS EA0/EA1=0/0 (ARP FAIL) FLUSH IT AT END-OF-LIFE
	SKIPG AOSTS(H)
	JRST ACLK1			;NOT VALID
	SKIPN AOEA0(H)
	SKIPE AOEA1(H)
	JRST ACLK3
	SETZM AOIA(H)			;FREE
	JRST ACLK3
;IF A WAIT-ACK ENTRY STILL HAS RETRIES MAKE IT A SEND-REQ
;OTHERWISE MAKE IT VALID, BUT WITH EA0/EA1=0/0, AND A 5 SEC TIME-TO-LIVE (SO
;THAT A PKT ALREADY IN THE XMQ, OR ONE THAT ARRIVES SOON, IS THROWN AWAY)
ACLK1:	SKIPE AOSTS(H)
	JRST ACLK3			;NOT WAIT-ACK
	PUSHJ P,ETHIOS			;ALWAYS GET OUTPUT SIDE RUNNING
	SOSN AOCNT(H)
	JRST ACLK2			;NO MORE WAIT-ACK RETRIES
	SETOM AOSTS(H)			;MAKE SEND-REQ
	JRST ACLK3
ACLK2:	SETZM AOEA0(H)			;0/0 (ARP FAIL)
	SETZM AOEA1(H)
	MOVEI T,1			;MAKE VALID
	MOVEM T,AOSTS(H)
	MOVEI T,2.*5.			;LIVE FOR 5 SEC
	MOVEM AOCLK(H)
ACLK3:	AOBJN H,ACLK0
	ANDI TT,177			;SPLX(TT)
	CONO PI,PICON(TT)
	POPJ P,

;CALLED TO FIND AN IA->EA MAPPING IN THE OUTBOUND ARP TABLE
;ON ENTRY C HOLDS THE IA (HW FMT) THAT NEEDS TO BE FOUND
;RTN+1	NOT FOUND
;RTN+2	FOUND, BUT WAITING FOR ARP-ACK
;RTN+3	FOUND, D/E IS EA0/EA1 (WHICH MIGHT BE 0/0)
ARPFND:	MOVSI H,-NAO
AFND0:	SKIPE T,AOIA(H)			;FIND IA
	CAME C,T
	AOBJN H,AFND0
	JUMPGE H,AFND2			;NOT FOUND, RTN+1
	AOS (P)
	SKIPG AOSTS(H)			;VALID ?
	JRST AFND2			;NO, RTN+2
	AOS (P)
	MOVE D,AOEA0(H)			;GOT EA0/EA1, RTN+3
	MOVE E,AOEA1(H)
	JUMPN D,AFND1			;LIVE FOR (ANOTHER) 60 MIN
	JUMPE E,AFND2			;IF EA0/EA1 NOT 0/0
AFND1:	MOVEI T,2.*60.*60.
	MOVEM T,AOCLK(H)
AFND2:	POPJ P,

;CALLED TO ADD AN ENTRY TO THE OUTBOUND ARP TABLE
;THE STS/CLK/CNT ARE RESET, IN ANTICIPATION OF CALLER SENDING AN ARP-REQ
;ON ENTRY C HOLDS THE IA (HW FMT) THAT NEEDS TO BE ADDED (WHICH IS
;ASSUMED TO NOT BE IN THE OUTBOUND ARP TABLE; THE CALLER HAS CHECKED)
;RTN+1	CAN'T ADD AN ENTRY TO THE TABLE
;RTN+2	ENTRY ADDED TO THE TABLE
ARPADD:	SETZ TT,			;OLDEST (GE => NO OLDEST)
	MOVSI H,-NAO
AADD0:	SKIPN AOIA(H)			;IS THIS A FREE ENTRY ?
	JRST AADD2			;YES, RECYCLE
	SKIPG AOSTS(H)			;VALID ?
	JRST AADD1			;NO, LEAVE ALONE
	SKIPN T,AOCLK(H)		;IS THIS A FULLY AGED ENTRY ?
	JRST AADD2			;YES, RECYCLE
	SKIPGE TT			;IF NO OLDEST OR NEW ENTRY
	CAMGE T,AOCLK(TT)		;OLDER THAN THE CURRENT OLDEST ?
	MOVE TT,H			;YES, NEW OLDEST
AADD1:	AOBJN H,AADD0
	SKIPL H,TT			;FOUND A REUSABLE OLDEST ?
	JRST AADD3			;NO, RTN+1
AADD2:	MOVEM C,AOIA(H)			;FILL IN NEW ENTRY
	SETZM AOSTS(H)			;WAIT-ACK
	MOVEI T,2.*5.			;WAIT 5 SEC FOR ACK
	MOVEM T,AOCLK(H)
	MOVEI T,2.			;2 TRIES
	MOVEM T,AOCNT(H)
	AOS (P)				;RTN+2
AADD3:	POPJ P,

;CALLED TO CHECK IF AN ARP-REQ FROM OUTBOUND IS NEEDED
;THE STS/CLK ARE RESET, IN ANTICIPATION OF CALLER SENDING AN ARP-REQ (CNT
;IS LEFT ALONG, BECAUSE IT IS BEING USED TO COUNT THE RETRIES)
;RTN+1	NO ARP-REQ NEEDED
;RTN+2	ARP-REQ NEEDED, C IS IA (HW FMT)
ARPORQ:	MOVSI H,-NAO
AORQ0:	SKIPE C,AOIA(H)			;FIND NON-FREE ENTRY
	SKIPL AOSTS(H)			;IN STATE SEND-REQ (<0)
	AOBJN H,AORQ0
	JUMPGE H,AORQ1			;NO NON-FREE ENTRY, RTN+1
	SETZM AOSTS(H)			;WAIT-ACK
	MOVEI T,2.*5.			;WAIT 5 SEC FOR ACK
	MOVEM T,AOCLK(H)
	AOS (P)				;RTN+2
AORQ1:	POPJ P,

;CALLED TO CHECK IF AN ARP-ACK FROM INBOUND IS NEEDED
;RTN+1	NO ARP-ACK NEEDED
;RTN+2	ARP-ACK NEEDED, C IS IA (HW FMT), D/E IS EA0/EA1 (HW FMT)
ARPOAK:	MOVSI H,-NAI
AOAK0:	SKIPN C,AIIA(H)			;FIND NON-FREE ENTRY
	AOBJN H,AOAK0
	JUMPGE H,AOAK1			;NO NON-FREE ENTRY, RTN+1
	SETZM AIIA(H)			;FREE
	MOVE D,AIEA0(H)
	MOVE E,AIEA1(H)
	AOS (P)				;RTN+2
AOAK1:	POPJ P,

;CALLED TO PROCESS AN ARP-REQ THAT HAS BEEN RECEIVED
;ON ENTRY A/B HOLD THE FIRST TWO WORDS OF THE ARP PKT (WHICH ARE UNUSED
;BUT WHICH NEED TO BE PRESERVED), C HOLDS THE ARC IA (HW FMT), AND
;D/E HOLD THE SRC EA0/EA1 (FOR WHICH THERE ISN'T A SW FMT)
ARPIRQ:	MOVSI H,-NAI
AIRQ0:	SKIPE AIIA(H)			;FIND FREE ENTRY
	AOBJN H,AIRQ0
	JUMPGE H,AIAK2			;NO FREE ENTRY, DONE
	MOVEM C,AIIA(H)			;SRC IA
	MOVEM D,AIEA0(H)		;SRC EA
	MOVEM E,AIEA1(H)
;IF A REMOTE HOST ASKS FOR MY EA, IT WANTS TO SEND ME SOMETHING,
;AND THERE IS A GOOD CHANCE THAT I WILL WANT TO SEND SOMETHING BACK, SO IF
;IT'S EASY, SAVE THE IA/EA OF THE REMOTE HOST IN THE OUTBOUND ARP TABLE
	MOVSI H,-NAO
AIRQ1:	SKIPE T,AOIA(H)			;ALREADY KNOWN ?
	CAME C,T
	AOBJN H,AIRQ1
	JUMPL H,AIAK2			;YES, DONE
	MOVSI H,-NAO
AIRQ2:	SKIPN AOIA(H)			;NO, LOOK FOR A FREE ENTRY
	JRST AIRQ3
	SKIPLE AOSTS(H)			;OR A VALID ENTRY THAT HAS AGED OUT
	SKIPE  AOCLK(H)
	AOBJN H,AIRQ2
AIRQ3:	JUMPGE H,AIAK2			;NO ENTRY, DONE
	MOVEM C,AOIA(H)			;SRC IA
	JRST AIAK1			;FINISH IN COMMON CODE

;CALLED TO PROCESS AN ARP-ACK THAT HAS BEEN RECEIVED
;ON ENTRY A/B HOLD THE FIRST TWO WORDS OF THE ARP PKT (WHICH ARE UNUSED
;BUT WHICH NEED TO BE PRESERVED), C HOLDS THE ARC IA (HW FMT), AND
;D/E HOLD THE SRC EA0/EA1 (FOR WHICH THERE ISN'T A SW FMT)
ARPIAK:	MOVSI H,-NAO
AIAK0:	SKIPE T,AOIA(H)			;FIND MATCH
	CAME C,T
	AOBJN H,AIAK0
	JUMPGE H,AIAK2			;NO ENTRY, IGNORE
;ARPIRQ/ARPIAK COME HERE TO FINISH FILLING IN AN OUTBOUND ARP TABLE ENTRY
AIAK1:	MOVEM D,AOEA0(H)		;SRC EA
	MOVEM E,AOEA1(H)
	MOVEI T,1			;VALID
	MOVEM T,AOSTS(H)
	MOVEI T,2.*60.*60.		;LIVE FOR 60 MIN
	MOVEM T,AOCLK(H)
AIAK2:	POPJ P,
